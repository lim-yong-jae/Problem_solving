#include<iostream>
using namespace std;

const int INF = 2100000000;

int T, N, M;
int info[2][10001];

int up[10001];
int down[10001];
int both[10001];

void init() {
	for (int i = 0; i < N; i++) {
		up[i] = INF;
		down[i] = INF;
		both[i] = INF;
	}
}

void solve(int start, int goal) {
	for (int i = start; i < goal; i++) {
		up[i] = both[i - 1] + 1;
		if (info[0][i - 1] + info[0][i] <= M)
			up[i] = down[i - 1] + 1 < up[i] ? down[i - 1] + 1 : up[i];

		down[i] = both[i - 1] + 1;
		if (info[1][i - 1] + info[1][i] <= M)
			down[i] = up[i - 1] + 1 < down[i] ? up[i - 1] + 1 : down[i];

		both[i] = up[i] + 1;
		both[i] = both[i] < down[i] + 1 ? both[i] : down[i] + 1;
		if (info[0][i] + info[1][i] <= M)
			both[i] = both[i] < both[i - 1] + 1 ? both[i] : both[i - 1] + 1;

		if (info[0][i - 1] + info[0][i] <= M && info[1][i - 1] + info[1][i] <= M) {
			if (i == 1) {
				both[i] = 2;
			}
			else {
				both[i] = both[i - 2] + 2 < both[i] ? both[i - 2] + 2 : both[i];
			}
		}
	}
}



int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> T;

	for (int t = 0; t < T; t++) {
		cin >> N >> M;
		for (int i = 0; i < N; i++) 
			cin >> info[0][i];
		for (int i = 0; i < N; i++) 
			cin >> info[1][i];
		int ans = INF;

		//1
		init();
		if (info[0][0] + info[1][0] <= M)
			both[0] = 1;
		else
			both[0] = 2;
		up[0] = 1;
		down[0] = 1;

		solve(1, N);

		ans = ans < both[N - 1] ? ans : both[N - 1];

		//2
		if (N >= 2 && info[0][0] + info[0][N - 1] <= M) {
			init();
			int a = info[0][0];
			info[0][0] = M;
			//
			up[0] = 1;
			down[0] = INF; //존재하지 않는다.
			both[0] = 2;

			solve(1, N - 1);
			both[N - 1] = both[N - 2] + 1;
			if (info[1][N - 1] + info[1][N - 2] <= M)
				both[N - 1] = both[N - 1] < up[N - 2] + 1 ? both[N - 1] : up[N - 2] + 1;

			info[0][0] = a;
			ans = ans < both[N - 1] ? ans : both[N - 1];
		}

		//3
		if (N >= 2 && info[1][0] + info[1][N - 1] <= M) {
			init();
			int a = info[1][0];
			info[1][0] = M;
			//
			up[0] = INF;
			down[0] = 1; 
			both[0] = 2;

			solve(1, N - 1);
			both[N - 1] = both[N - 2] + 1;
			if (info[0][N - 1] + info[0][N - 2] <= M)
				both[N - 1] = both[N - 1] < down[N - 2] + 1 ? both[N - 1] : down[N - 2] + 1;

			info[1][0] = a;
			ans = ans < both[N - 1] ? ans : both[N - 1];
		}

		//4
		if (N >= 2 && info[0][0] + info[0][N - 1] <= M && info[1][0] + info[1][N - 1] <= M) {
			init();
			info[0][0] = M;
			info[1][0] = M;
			if (info[0][1] + info[1][1] <= M)
				both[1] = 1;
			else
				both[1] = 2;
			up[1] = 1;
			down[1] = 1;

			solve(2, N - 1);
			both[N - 1] = both[N - 2] + 2;

			ans = ans < both[N - 1] ? ans : both[N - 1];
		}

		cout << ans << '\n';
	}

	return 0;
}
