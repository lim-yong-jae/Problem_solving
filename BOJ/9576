#include <iostream>
#include<vector>
using namespace std;


const int n_ = 1001 + 1000;
int N, M, K;
int table[n_];
vector<int> v[1001];
bool visit[1001];


bool dfs(int prev, int ex){
	if(visit[prev] == 0)
		visit[prev] = 1;
	else
		return 0;
		
	int size = v[prev].size();
	for(int i=0; i<size; i++){
		if(prev == table[v[prev][i]] || v[prev][i] == ex)
			continue;
			
		if(table[v[prev][i]] != 0){
			bool ret = dfs(table[v[prev][i]], v[prev][i]);
			
			if(ret == 1){
				table[v[prev][i]] = prev;
				return 1;
			}else{
				continue;
			}
		}else{
			table[v[prev][i]] = prev;
			return 1;
		}
	}
	
	return 0;
}



int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	int T;
	cin >> T;
	for(int t = 0; t< T; t++){
        for(int i=1; i<=n_; i++)
             table[i] = 0;
        
		cin >> N >> M; 
		
		for(int i=1; i<=M; i++){
			int a, b;
			cin >> a >> b;
			
			for(int k=a; k<=b; k++){
				v[i].push_back({1000+k});
			}
		}
		
		int ans = 0;
		for(int i=1; i<=M; i++){
			for(int i=1; i<=M; i++)
				visit[i] = 0;
			
			int ret = dfs(i, 0);
			if(ret)
				ans++;
		}
		
		cout << ans << '\n';
		
		for(int i=1; i<=M; i++){
			v[i].clear();
		}
	}
	
	return 0;
}
