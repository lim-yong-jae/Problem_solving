#include<vector>
#include<iostream>
#include<utility>
#include<algorithm>
using namespace std;

typedef long long ll;

ll info[41];
int N, M;
vector<ll> v[2];

void dfs(int left, int right, ll sum, int state){
	if(left > right){
		v[state].push_back(sum);
		return;
	}
	
	dfs(left + 1, right, sum + info[left], state);
	dfs(left + 1, right, sum, state);
}

int main(){
	cin >> N >> M;
	for(int i=0;i<N; i++){
		cin >> info[i];
	}
	
	dfs(0, N/2-1, 0, 0);
	dfs(N/2, N-1, 0, 1);
	
	sort(v[0].begin(), v[0].end(), less<int>());
	sort(v[1].begin(), v[1].end(), less<int>());
	
	ll ans = 0;
	int size = v[0].size();
	for(int i=0; i<size; i++){
		vector<ll>::iterator iter = lower_bound(v[1].begin(), v[1].end(), M - v[0][i]);
		if(iter != v[1].end()){
			vector<ll>::iterator next = upper_bound(v[1].begin(), v[1].end(), M-v[0][i]);
			
			ans += (next - iter);
		}
	}
	
	if(M == 0)
		ans = ans -1;
		
	cout << ans;
	return 0;
}
