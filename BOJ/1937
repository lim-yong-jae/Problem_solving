#include<cstdio>
#include<cstdlib>

int N;
int arr[501][501] = { 0, };
int dp[501][501] = { 0, };
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };

int max(int a, int b) {
	if (a > b)
		return a;
	return b;
}

int dfs(int start_i, int start_j) {
	int check = 1;
	if (dp[start_i][start_j] == -1) {
		for (int i = 0; i < 4; i++) {
			if (1 <= start_i + dx[i] && start_i + dx[i] <= N &&
				1 <= start_j + dy[i] && start_j + dy[i] <= N) {
				if (arr[start_i + dx[i]][start_j + dy[i]] > arr[start_i][start_j]) {
					dp[start_i][start_j] = max(dp[start_i][start_j], dfs(start_i + dx[i], start_j + dy[i]));
					check = 0;
				}
			}
		}
		if (check) {
			dp[start_i][start_j] = 0;
		}
	}
	return dp[start_i][start_j]+1;
}

int main() {
	int next = 0;
	int prev = 0;
	scanf("%d", &N);
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			scanf("%d", &arr[i][j]);
			dp[i][j] = -1;
		}
	}
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			dfs(i, j);
		}
	}
	int max_count = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			max_count = max(max_count, dp[i][j]);
		}
	}
	printf("%d", max_count+1);
	return 0;
}
