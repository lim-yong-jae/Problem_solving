#include<iostream>
#include<queue>
using namespace std;

const int n_ = 51;
int N, M;
char map[n_][n_];
queue<pair<int, int>> w_pos;
pair<int, int> start, goal;
bool table[n_][n_];
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };

int main() {
	cin >> N >> M;

	for (int i = 1; i <= N; i++) {
		getchar();

		for (int j = 1; j <= M; j++) {
			cin >> map[i][j];

			if (map[i][j] == 'D') {
				goal.first = i;
				goal.second = j;
				map[i][j] = '.';
			}
			else if (map[i][j] == 'S') {
				start.first = i;
				start.second = j;
				map[i][j] = '.';
				table[i][j] = 1;
			}
			else if (map[i][j] == '*') {
				w_pos.push({ i,j });
			}
		}
	}

	queue<pair<int, int>> q;
	q.push(start);

	for (int t=1;;t++) {
		// 물먼저 차고 -> 비버의 이동
		int size = w_pos.size();

		for (int i = 0; i < size; i++) {
			int p_i = w_pos.front().first;
			int p_j = w_pos.front().second;
			w_pos.pop();

			for (int j = 0; j < 4; j++) {
				int n_i = p_i + dx[j];
				int n_j = p_j + dy[j];

				if (1 > n_i || n_i > N || 1 > n_j || M < n_j || map[n_i][n_j] != '.')
					continue;
				else {
					if (n_i == goal.first && n_j == goal.second)
						continue;
					w_pos.push({ n_i, n_j });
					map[n_i][n_j] = '*';
				}
			}
		}

		size = q.size();
		if (size == 0) break;

		for (int i = 0; i < size; i++) {
			int p_i = q.front().first;
			int p_j = q.front().second;
			q.pop();

			for (int j = 0; j < 4; j++) {
				int n_i = p_i + dx[j];
				int n_j = p_j + dy[j];

				if (1 > n_i || n_i > N || 1 > n_j || M < n_j || map[n_i][n_j] != '.' || table[n_i][n_j] == 1)
					continue;
				//이동 가능한 곳.
				table[n_i][n_j] = 1;
				if (n_i == goal.first && n_j == goal.second) {
					cout << t;
					return 0;
				}
				else 
					q.push({ n_i, n_j });
			}
		}
	}

	cout << "KAKTUS";
	return 0;
}
