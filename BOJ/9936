#include<iostream>
#define ll long long
//#pragma warning(disable:4996)
using namespace std;

int N, M;
ll dp[1001][1001][8]; // 남은 도미노 개수, 높이, 상태
ll arr[1001][4];

ll max(ll a, ll b) { return a < b ? b : a; }

int main() {
	//freopen("input.txt", "r", stdin);
	cin >> N >> M;
	for (int i = 1; i <= N; i++)
		cin >> arr[i][1] >> arr[i][2] >> arr[i][3];

	for (int i = 1; i <= N; i++) {
		for (int k = 0; k < 8; k++)
			dp[0][i][k] = 0;

		for (int j = 1; j <= M; j++)
			for (int k = 0; k < 8; k++)
				dp[j][i][k] = -3e9;
	}

	// 값이 존재하는 경우.
	dp[1][N][4] = arr[N][2] + arr[N][3];
	dp[1][N][1] = arr[N][1] + arr[N][2];
	dp[1][N][0] = dp[1][N][4] < dp[1][N][1] ? dp[1][N][1] : dp[1][N][4];

	for (int i = N - 1; i >= 1; i--) { // 높이
		ll c1 = arr[i][1] + arr[i + 1][1]; //1열
		ll c2 = arr[i][2] + arr[i + 1][2]; //2열
		ll c3 = arr[i][3] + arr[i + 1][3]; //3열
		ll r1 = arr[i][1] + arr[i][2]; //1행
		ll r2 = arr[i][2] + arr[i][3]; //2행

		for (int j = 1; j <= M; j++) { // 남은 도미노
			//항상 이전 층으로 넘겨야한다. 
			dp[j][i][0] = max(dp[j][i][0], dp[j][i + 1][0]); //현재를 안채움

			dp[j][i][0] = max(dp[j][i][0], c1 + dp[j - 1][i + 1][4]);
			dp[j][i][0] = max(dp[j][i][0], c2 + dp[j - 1][i + 1][2]);
			dp[j][i][0] = max(dp[j][i][0], c3 + dp[j - 1][i + 1][1]);
			dp[j][i][0] = max(dp[j][i][0], r1 + dp[j - 1][i + 1][0]);
			dp[j][i][0] = max(dp[j][i][0], r2 + dp[j - 1][i + 1][0]);

			if (j >= 2) {
				dp[j][i][0] = max(dp[j][i][0], c1 + c2 + dp[j - 2][i + 1][6]);
				dp[j][i][0] = max(dp[j][i][0], c2 + c3 + dp[j - 2][i + 1][3]);
				dp[j][i][0] = max(dp[j][i][0], c1 + c3 + dp[j - 2][i + 1][5]);
				dp[j][i][0] = max(dp[j][i][0], r1 + c3 + dp[j - 2][i + 1][1]);
				dp[j][i][0] = max(dp[j][i][0], r2 + c1 + dp[j - 2][i + 1][4]);
			}

			if (j >= 3)
				dp[j][i][0] = max(dp[j][i][0], c1 + c2 + c3 + dp[j - 3][i + 1][7]);

			//3
			dp[j][i][1] = max(dp[j][i][1], dp[j][i + 1][0]);
			dp[j][i][1] = max(dp[j][i][1], c1 + dp[j - 1][i + 1][4]);
			dp[j][i][1] = max(dp[j][i][1], c2 + dp[j - 1][i + 1][2]);
			dp[j][i][1] = max(dp[j][i][1], r1 + dp[j - 1][i + 1][0]);

			if (j >= 2)
				dp[j][i][1] = max(dp[j][i][1], c1 + c2 + dp[j - 2][i + 1][6]);

			//2
			dp[j][i][2] = max(dp[j][i][2], dp[j][i + 1][0]);
			dp[j][i][2] = max(dp[j][i][2], c1 + dp[j - 1][i + 1][4]);
			dp[j][i][2] = max(dp[j][i][2], c3 + dp[j - 1][i + 1][1]);

			if (j >= 2)
				dp[j][i][2] = max(dp[j][i][2], c1 + c3 + dp[j - 2][i + 1][5]);

			//23
			dp[j][i][3] = max(dp[j][i][3], dp[j][i + 1][0]);
			dp[j][i][3] = max(dp[j][i][3], c1 + dp[j - 1][i + 1][4]);

			//1
			dp[j][i][4] = max(dp[j][i][4], dp[j][i + 1][0]);
			dp[j][i][4] = max(dp[j][i][4], c2 + dp[j - 1][i + 1][2]);
			dp[j][i][4] = max(dp[j][i][4], c3 + dp[j - 1][i + 1][1]);
			dp[j][i][4] = max(dp[j][i][4], r2 + dp[j - 1][i + 1][0]);

			if (j >= 2)
				dp[j][i][4] = max(dp[j][i][4], c2 + c3 + dp[j - 2][i + 1][3]);

			//13
			dp[j][i][5] = max(dp[j][i][5], dp[j][i + 1][0]);
			dp[j][i][5] = max(dp[j][i][5], c2 + dp[j - 1][i + 1][2]);

			//12
			dp[j][i][6] = max(dp[j][i][6], dp[j][i + 1][0]);
			dp[j][i][6] = max(dp[j][i][6], c3 + dp[j - 1][i + 1][1]);

			//123
			dp[j][i][7] = max(dp[j][i][7], dp[j][i + 1][0]);
		}
	}

	cout << dp[M][1][0];
	return 0;
}
