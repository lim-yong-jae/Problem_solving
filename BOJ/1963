/*
 4자리 소수를 모두 구한다
*/
#include<iostream>
#include<queue>
#include<cstring>
using namespace std;


bool table[10001];
bool visit[10001];
int T, b, a;
queue<int> q;

int main() {
	for (int i = 2; i < 10001; i++)
		if (table[i] == 0)
			for (int k = 2; k*i <= 10000; k++)
				table[k*i] = 1; //소수가 아니다.


	cin >> T;

	for (int I = 0; I < T; I++) {
		cin >> a >> b; // a -> b로 가기위함.

		memset(visit, 0, sizeof(visit));
		q.push(a);
		bool state = 0;

		for (int cnt = 0; ; cnt++) {
			int size = q.size();

			if (size == 0 && state == 0) {
				//불가능한 경우.
				cout << "Impossible" << '\n';
				break;
			}

			for (int i = 0; i < size; i++) {
				int num = q.front();
				q.pop();

				if (num == b) { // 발견.
					state = 1;
					cout << cnt << '\n';
					break;
				}

				//천의 자리 바꾸기
				int prev = num % 1000;
				for (int j = 1; j <= 9; j++) {
					if (visit[prev + 1000 * j] != 1 && table[prev + 1000 * j] == 0) { //방문하지 않았고 소수이다.
						visit[prev + 1000 * j] = 1;
						q.push(prev + 1000 * j);
					}
				}

				//백의 자리 바꾸기
				prev = (num % 1000) - (num % 100);
				for (int j = 0; j <= 9; j++) {
					if (visit[num - prev + 100 * j] != 1 && table[num - prev + 100 * j] == 0) {
						visit[num - prev + 100 * j] = 1;
						q.push(num - prev + 100 * j);
					}
				}

				//십의 자리 바꾸기
				prev = (num % 100) - (num % 10);
				for (int j = 0; j <= 9; j++) {
					if (visit[num - prev + 10 * j] != 1 && table[num - prev + 10 * j] == 0) {
						visit[num - prev + 10 * j] = 1;
						q.push(num - prev + 10 * j);
					}
				}

				//일의 자리 바꾸기
				prev = (num % 10);
				for (int j = 0; j <= 9; j++) {
					if (visit[num - prev + j] != 1 && table[num - prev + j] == 0) {
						visit[num - prev + j] = 1;
						q.push(num - prev + j);
					}
				}
			}

			if (state == 1)
				break;
		}

		//큐 지우기.
		int size = q.size();
		for (int i = 0; i < size; i++) {
			q.pop();
		}
	}

	return 0;
}
