#include <iostream>
#include<vector>
using namespace std;

const int n_ = 100001;

int level[n_];
int dp[n_][21];
bool visit_table[n_];
vector<int> v[n_];
int N, M;

void dfs(int prev, int pre, int lv){
    visit_table[prev] = 1;
	level[prev] = lv;
	dp[prev][0] = pre;
	
	for(int i=1;i<=20;i++){
		if(dp[dp[prev][i-1]][i-1] != 0){
			dp[prev][i] = dp[dp[prev][i-1]][i-1];
		}
		else{
			dp[prev][i] = 1;
		}
	}
	
	int size = v[prev].size();
	for(int i=0; i<size; i++){
		if(visit_table[v[prev][i]] == 0){
			dfs(v[prev][i], prev, lv+1);
		}
	}
}



int main() {
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	cin >> N;
	
	for(int i=0; i<N-1; i++){
		int a, b;
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	
	dfs(1,0,1);
	//return 0;
	cin >> M;
	for(int k=0; k<M; k++){
		int a, b;
		cin >> a >> b;
		
		int lv1 = level[a];
		int lv2 = level[b];
		
		if(lv2 > lv1)
			swap(a,b);
		//a에서 이동
		int cmp = abs(lv1 - lv2); 
		
		while(cmp != 0){
			for(int i=1; i<=20; i++){
				if(cmp < (1<<i)){
					a = dp[a][i-1];
					cmp -= (1<<(i-1));
					break;
				}
			}
		}
        
		while(a != b){
		    for(int i=1; i<=20; i++){
		    	if(dp[a][i] == dp[b][i]){
		    		a = dp[a][i-1];
		    		b = dp[b][i-1];
		    		break;
		    	}
		    }
        }
        
        cout << a << '\n';
	}
	
	return 0;
}
