#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

const int MAX = 2100000000;

int min(int a, int b) {
	if (a < b) return a;
	return b;
}

int max(int a, int b) {
	if (a > b) return a;
	return b;
}

int N;
int info[10001] = { 0, };
vector<int> v[10001]; //인접 정보도 담고 있다.
vector<int> tree[10001];
bool visit_table[10001] = { 0, };
int dp[10001][2];

int dfs(int prev, int check) {
	if (dp[prev][check] == -1) {
		if (check == 1)
			dp[prev][check] = info[prev];
		else 
			dp[prev][check] = 0;
		int ret = 0;
		for (int i = 0; i < tree[prev].size(); i++) {
			if (check == 1)
				ret = dfs(tree[prev][i], 0);
			else {
				ret = dfs(tree[prev][i], 1);
				ret = max( ret, dfs(tree[prev][i], 0)); //우수마을로서 방문 하지 않았을 때와 비교한다.
			}
			dp[prev][check] += ret;
		}
	}
	return dp[prev][check];
}

int main() {
	scanf("%d", &N);
	for (int i = 1; i <= N; i++)
		scanf("%d", &info[i]);

	for (int i = 1; i < N; i++) {
		int start, end;
		scanf("%d %d", &start, &end);
		v[start].push_back(end);
		v[end].push_back(start);
	}

	//임의로 1번 노드를 루트노드를 선정.
	queue<int> q;
	q.push(1);
	visit_table[1] = 1;
	//무방향 트리를 항상 자식으로 방향을 향하는 방향트리로 만든다.
	for (;;) {
		int size = q.size();
		if (size == 0)
			break;

		for (int i = 0; i < size; i++) {
			int prev = q.front();
			q.pop();
			for (int j = 0; j < v[prev].size(); j++) {
				if (visit_table[v[prev][j]] == 0) {
					visit_table[v[prev][j]] = 1;
					tree[prev].push_back(v[prev][j]);
					q.push(v[prev][j]);
				}
			}
		}
	}
	memset(dp, -1, sizeof(dp));
	printf("%d", max(dfs(1,0), dfs(1,1))); //1번마을을 우수마을로 선택 했을 때 선택하지 않았을 때.
	return 0;
}
