#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

int N,M;
int map[301][301] = { 0, };
int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1, };
int info_map[301][301] = { 0, }; //주위에 몇개의 물이 있는지.
vector<pair<int, int>> v;
queue<vector<pair<int, int>>> q;
bool visit_table[301][301] = { 0, };

int dfs(int start_i, int start_j) {
	int ret = 1;
	for (int i = 0; i < 4; i++) {
		if (1 <= start_i + dx[i] && start_i + dx[i] <= N && 1 <= start_j + dy[i] && start_j + dy[i] <= M 
			&& visit_table[start_i + dx[i]][start_j + dy[i]] == 0 && map[start_i + dx[i]][start_j + dy[i]] > 0) {
			visit_table[start_i + dx[i]][start_j + dy[i]] = 1;
			ret += dfs(start_i + dx[i], start_j + dy[i]);
		}
	}
	return ret;
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] != 0)
				v.push_back({ i,j });
		}
	}

	for (int i = 0; i < v.size(); i++) {
		int start_i = v[i].first;
		int start_j = v[i].second;
		for (int i = 0; i < 4; i++) {
			if (1 <= start_i + dx[i] && start_i + dx[i] <= N
				&& 1 <= start_j + dy[i] && start_j + dy[i] <= M) {
				if (map[start_i + dx[i]][start_j + dy[i]] <= 0)
					info_map[start_i][start_j] += 1;
			}
		}
	}

	q.push(v);
	for (int level = 1;;level++) {
		int size = q.size();
		if (size == 0)
			break;
		for (int j = 0; j < size; j++) {
			vector<pair<int, int>> prev = q.front();
			q.pop();
			vector<pair<int, int>> next;
			for (int i = 0; i < prev.size(); i++) {
				map[prev[i].first][prev[i].second] -= info_map[prev[i].first][prev[i].second];
				if (map[prev[i].first][prev[i].second] >0)
					next.push_back({ prev[i].first , prev[i].second });
			}
			//빙산이 불리됐는지 검사. next.size()은 빙산의 갯수이다.
			if (next.size() == 0)
				break; //다 녹았다.

			memset(visit_table, 0, sizeof(visit_table));
			visit_table[next[0].first][next[0].second] = 1;
			int num1 = dfs(next[0].first, next[0].second);
			if (num1 != next.size()) {
				printf("%d", level);
				return 0;
			}
			//바다로 얼마나 덮혀있는지 갱신.
			memset(info_map, 0, sizeof(info_map));
			for (int i = 0; i < next.size(); i++) { //빙산이 남아있는 곳.
				int start_i = next[i].first;
				int start_j = next[i].second;
				for (int i = 0; i < 4; i++) {
					if (1 <= start_i + dx[i] && start_i + dx[i] <= N
						&& 1 <= start_j + dy[i] && start_j + dy[i] <= M) {
						if (map[start_i + dx[i]][start_j + dy[i]] <= 0)
							info_map[start_i][start_j] += 1;
					}
				}
			}
			q.push(next);
		}
	}
	printf("0");
	return 0;
}
