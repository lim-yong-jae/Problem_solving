#include<iostream>
#include<vector>
#include<cstring>
//#pragma warning(disable:4996)
using namespace std;

const int n_ = 101;
int N, M;
bool arr[n_][n_];
bool visit[n_];
int child[n_];
int parent[n_];
int num = 0;
struct state {
	int a;
	int b;
	int c;
};
struct state s[n_];


bool dfs(int prev) {
	if (visit[prev])
		return 0;
	visit[prev] = 1;

	for (int i = 1; i <= N; i++) {
		if (arr[prev][i] == 1) {
			if (i == child[prev]) //현재 연결을 제외.
				continue;

			if (parent[i] == 0 || dfs(parent[i])) {
				parent[i] = prev;
				child[prev] = i;
				return 1;
			}
		}
	}

	return 0;
}

int main() {
	//freopen("input.txt", "r", stdin);
	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> s[i].a >> s[i].b >> s[i].c;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (i == j)
				continue;

			if (s[i].a >= s[j].a && s[i].b >= s[j].b && s[i].c >= s[j].c) {
				if (s[i].a == s[j].a && s[i].b == s[j].b && s[i].c == s[j].c) {
					int ret = i < j ? i : j;
					arr[ret][i + j - ret] = 1;
					arr[50 + ret][i + j - ret] = 1;
				}
				else {
					arr[i][j] = 1;
					arr[50 + i][j] = 1;
				}
			}
		}
	}


	for (int i = 1; i <= 50 + N; i++) {
		for (int j = 1; j <= N; j++) {
			if (arr[i][j] == 1) {
				if (parent[j] == 0 || dfs(parent[j])) {
					child[i] = j;
					parent[j] = i;
					num++;
					memset(visit, 0, sizeof(visit));
					break;
				}
			}
		}
	}

	cout << N - num;
	return 0;
}
