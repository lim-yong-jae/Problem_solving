#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

int N, M;
int map[51][51] = { 0, }; //H은 -1.
int dx[8] = { 1,-1,0,0,1,-1,1,-1 };
int dy[8] = { 0,0,1,-1,1,1,-1,-1 };
bool visit_table[51][51] = { 0, };
int check = 0;
int dp[51][51] = { 0, };

int dfs(int prev_i, int prev_j) {
	int ret = dp[prev_i][prev_j];
	if (ret == -1 && check == 0) {
		for (int i = 0; i < 4; i++) {
			int k = map[prev_i][prev_j];
			if (1 <= prev_i + dx[i] * k && prev_i + dx[i] * k <= N && 1 <= prev_j + dy[i] * k && prev_j + dy[i] * k <= M) {
				if (map[prev_i + dx[i] * k][prev_j + dy[i] * k] == -1)
					ret = max(ret, 1);
				else {
					if (visit_table[prev_i + dx[i] * k][prev_j + dy[i] * k] == 0) {
						visit_table[prev_i + dx[i] * k][prev_j + dy[i] * k] = 1;
						ret = max(ret, dfs(prev_i + dx[i] * k, prev_j + dy[i] * k) + 1);
						if (check == 1)
							return 0;
						visit_table[prev_i + dx[i] * k][prev_j + dy[i] * k] = 0;
					}
					else {
						check = 1; //무한반복 가능.
						return 0;
					}
				}
			}
			else //맵밖으로 나감.
				ret = max(ret, 1);
		}
		dp[prev_i][prev_j] = ret;
	}
	return ret;
}

int main() {
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) {
		getchar();
		char str[51];
		scanf("%s", str);
		for (int j = 1; j <= M; j++) {
			if (str[j - 1] == 'H')
				map[i][j] = -1;
			else
				map[i][j] = str[j - 1] - '0';
		}
	}
	if (map[1][1] == -1) {
		printf("0");
		return 0;
	}
	memset(dp, -1, sizeof(dp));
	int num = dfs(1, 1);
	if (check == 1)
		printf("-1");
	else
		printf("%d", num);
	return 0;
}
