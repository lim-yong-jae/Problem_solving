#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct compare {
	bool operator()(pair<int, pair<int, int>> p1, pair<int, pair<int, int>> p2) {
		return p1.second > p2.second;
	}
};

int N, M;
int info[1001];
vector<pair<int, int>> v[1001];
int table[1001][1001];
int ans = 1001;
const int INF = 2100000000;

void dik() {
	for (int i = 0; i < 1001; i++) {
		for (int j = 0; j < 1001; j++) {
			table[i][j] = INF;
		}
		table[i][0] = 0;
	}
	priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, compare> q;
	q.push({ 0, {0, 0} });

	while (!q.empty()) {
		pair<int, pair<int, int>> s = q.top();
		q.pop();

		int prev = s.first;
		int cnt = s.second.first;
		int time = s.second.second;

		if (cnt > ans) {
			continue;
		}

		if (prev == M) {
			ans = ans < cnt ? ans : cnt;
			continue;
		}

		int size = v[prev].size();
		for (int i = 0; i < size; i++) {
			int next = v[prev][i].first;
			int next_w = time + v[prev][i].second;

			if (info[prev] != info[next]) {
				if (table[cnt + 1][next] > next_w) {
					table[cnt + 1][next] = next_w;
					q.push({ next, {cnt + 1, next_w} });
				}
			}
			else {
				if (table[cnt][next] > next_w) {
					table[cnt][next] = next_w;
					q.push({ next, {cnt, next_w} });
				}
			}
		}
	}
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		cin >> info[i];
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			int a;
			cin >> a;
			if (a == 0)
				continue;
			v[i].push_back({ j, a });
		}
	}

	dik();

	for (int i = 0; i < 1001; i++) {
		if (table[i][M] != INF) {
			cout << i << ' ' << table[i][M];
			return 0;
		}
	}

	return 0;
}
