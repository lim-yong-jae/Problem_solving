#include<iostream>
#include<vector>
#include<queue>
//#pragma warning(disable:4996)
using namespace std;

struct state {
	int t;
	int i;
	int j;
	state(int a, int b, int c) : t(a), i(b), j(c) {} // 생성자
	bool operator <(state A)const { return t > A.t; }
};

const int INF = 210000000;

int N, M;
int map[51][51];
pair<int, int> info[2501];
int cnt = 0;
priority_queue <struct state> q;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
int prev_state[51][51];
bool dd[51][51];
bool ddd[51][51];
bool table[2501];

int dfs(int n, int prev) {
	int ret = INF;

	if (n != M && prev >= cnt) 
		return INF;

	if (n == M) {
		for (int i = 0; i < 51; i++) {
			for (int j = 0; j < 51; j++) {
				ddd[i][j] = 0;
				prev_state[i][j] = INF;
			}
		}

		for (int i = 0; i < cnt; i++) {
			if (table[i] == 1) {
				q.push({ 0,info[i].first, info[i].second });
				prev_state[info[i].first][info[i].second] = 0;
			}
		}

		while (!q.empty()) {
			struct state prev = q.top();
			q.pop();

			for (int i = 0; i < 4; i++) {
				int n_i = prev.i + dx[i];
				int n_j = prev.j + dy[i];

				if (n_i < 0 || n_i >= N || n_j < 0 || n_j >= N ||
					map[n_i][n_j] == 1) {
					continue;
				}

				if (map[n_i][n_j] == 2 && dd[n_i][n_j] == 0
					&& ddd[n_i][n_j] == 0){
					ddd[n_i][n_j] = 1;

					prev_state[n_i][n_j] = prev.t + 1;
					q.push({ prev.t + 1,n_i,n_j });
					continue;
				}

				if (prev_state[n_i][n_j] <= prev.t + 1) {
					continue;
				}
				else {
					prev_state[n_i][n_j] = prev.t + 1;
					q.push({ prev.t + 1, n_i, n_j });
				}
			}
		}

		int max_count = 0;

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				if (map[i][j] == 0) {
					if (dd[i][j] == 1) {
						continue;
					}

					max_count = max_count > prev_state[i][j] ? 
							max_count : prev_state[i][j];
				}
			}
		}

		return max_count;
	}

	table[prev] = 1;
	dd[info[prev].first][info[prev].second] = 1;
	int cmp = dfs(n + 1, prev + 1);
	ret = ret < cmp ? ret : cmp;

	table[prev] = 0;
	dd[info[prev].first][info[prev].second] = 0;
	cmp = dfs(n, prev + 1);
	ret = ret < cmp ? ret : cmp;

	return ret;
}


int main() {
	//freopen("input.txt", "r", stdin);
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];

			if (map[i][j] == 2) {
				info[cnt].first = i;
				info[cnt++].second = j;
			}
		}
	}

	int ans = dfs(0, 0);

	if (ans == INF) {
		cout << "-1";
	}
	else{
		cout << ans;
	}

	return 0;
}
