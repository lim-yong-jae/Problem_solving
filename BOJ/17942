#include <iostream>
#include<vector>
#include<utility>
#include<algorithm>
using namespace std;

int N, M, K;
int info[100001];
int sch[100001];
bool check[100001] = {0,};
pair<int,int> p[100001];
vector<pair<int,int>> v[100001];
int t = 0;

bool compare(pair<int,int> p1, pair<int,int> p2){
	return p1.second < p2.second;
}


void dfs(int prev){
	if(check[prev] == 0){
		check[prev] = 1;
	}else
		return;
		
		
	int s = v[prev].size();
	for(int i=0; i<s; i++){
		int pos = v[prev][i].first;
		sch[pos] -= v[prev][i].second;
		
		if(sch[pos] <= t){
			dfs(pos);
		}
	}
}


int main() {
	cin >> N >> M;
	
	for(int i=1; i<=N; i++){
		cin >> info[i];
		p[i].first = i;
		p[i].second = info[i];
	}
	
	sort(p+1, p+N+1, compare);
	
	int min = p[1].second;
	int max = p[N].second;
	
	cin >> K;
	for(int i=0; i<K; i++){
		int a, b, c;
		cin >> a >> b >> c;
		v[a].push_back({b,c});
	}
	
	int ans = p[M].second;
	int start = 1;
	int end = p[M].second;
	while(start <= end){
		int ret = 0;
		int mid = (start + end)/2; 
		t = mid; // 시간을 mid으로 설정.
		
		for(int i=1; i<=N; i++){
			sch[i] = info[i];
			check[i] = 0;
		}
		
		for(int i=1; i<=N; i++){
			int pos = p[i].first;
			if(sch[pos] <= t){
				dfs(pos);
			}
		}
		
		for(int i=1; i<=N; i++){
			int pos = p[i].first;
			if(sch[pos] <= t){
				ret++;
			}
		}
		
		
		if(ret >= M){
			end = mid -1;
			ans = ans < t ? ans : t;
		}else{
			start = mid + 1;
		}
	}
	
	cout << ans;
	return 0;
}
