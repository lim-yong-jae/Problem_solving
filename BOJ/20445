#include <iostream>
#include<vector>
#include<utility>
#include<algorithm>
using namespace std;
typedef long long ll;
const ll INF = 410000000000;

int N, M;
pair<ll, ll> info[101];
ll cost[202][202];
vector<int> v;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	for (int i = 0; i < 202; i++) {
		for (int j = 0; j < 202; j++) {
			cost[i][j] = INF;
		}
	}

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		cin >> info[i].first >> info[i].second;
		v.push_back(info[i].first);
		v.push_back(info[i].second);
	}

	sort(v.begin(), v.end(), less<int>());
	v.erase(unique(v.begin(), v.end()), v.end());

	for (int i = 0; i < N; i++) {
		int idx = lower_bound(v.begin(), v.end(), info[i].first) - v.begin();
		int idx2 = lower_bound(v.begin(), v.end(), info[i].second) - v.begin();
		cost[idx][idx2] = info[i].second - info[i].first + 1;
	}

	//1-3, 2-10 << 1-10
	int size = v.size();
	for (int i = 0; i < size; i++) {
		for (int j = i+1; j < size; j++) {
			for (int k = i; k < j; k++) {
				for (int d = i; d <= k; d++) {
					if (cost[i][j] > cost[i][k] + cost[d][j]) {
						cost[i][j] = cost[i][k] + cost[d][j];
					}
				}
			}
		}
	}


	for (int i = 0; i < M; i++) {
		int a, b;
		cin >> a >> b;

		int idx1 = lower_bound(v.begin(), v.end(), a) - v.begin();
		if (v[idx1] != a)
			idx1 -= 1;
		int idx2 = lower_bound(v.begin(), v.end(), b) - v.begin();

		if (idx1 < 0 || idx2 == size) {
			cout << "-1" << '\n';
			continue;
		}

		ll ans = INF;
		for (int j = idx1; j >= 0; j--) {
			for (int k = idx2; k < size; k++) {
				ans = cost[j][k] < ans ? cost[j][k] : ans;
			}
		}
		if (ans == INF) {
			ans = -1;
		}
		cout << ans << '\n';
	}

	return 0;
}
