#include<iostream>
#include<cstring>
#include<cstdio>
#include<vector>
#include<stack>
#include<map>
#include<set>
#include<queue>
#include<utility>
#include<algorithm>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

const int n_ = 2002;
const int INF = 2100000000;
vector<int> v[n_];
int work[n_];
bool visit[n_];
int N, M, K; 


bool dfs(int prev){
	if(visit[prev] == 0)
		visit[prev] = 1;
	else
		return 0;
		
	int size = v[prev].size();
	for(int i=0; i<size; i++){
		if(prev == work[v[prev][i]])
			continue;
			
		if(work[v[prev][i]] != 0){
			bool ret = dfs(work[v[prev][i]]);
			
			if(ret == 1){
				work[v[prev][i]] = prev;
				return 1;
			}else{
				continue;
			}
		}else{
			work[v[prev][i]] = prev;
			return 1;
		}
	}
	
	return 0;
}



int main(){
	ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	cin >> N >> M >> K;
	
	for(int i=1; i<=N; i++){
		int a;
		cin >> a;
		
		for(int j=0; j<a; j++){
			int b;
			cin >> b;
			v[i].push_back(b);
			v[1000 + i].push_back(b);
		}
	}
	
	int ans = 0;
	for(int i=1; i<=N; i++){
		for(int j=1; j<=N +1000; j++)
			visit[j] = 0;
		
		int ret = dfs(i);
		if(ret == 1)
			ans++;
	}
	
	int cnt = 0;
	for(int i=1+1000; i<=N+1000; i++){
		for(int j=1; j<=N+1000; j++)
			visit[j] = 0;
		
		if(cnt == K)
			break;
			
		int ret = dfs(i);
		if(ret == 1){
			ans++;
			cnt++;
		}
	}
	
	cout << ans;
	
	return 0;
}
