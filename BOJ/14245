#include <iostream>
#include<vector>
using namespace std;


int info[500001];
int tree[4*500001];
int lazy[4*500001];
int ans = 0;

void update(int left, int right, int prev, int start, int goal, int num){
	if(goal < left || right < start)
		return;
	
	if(start <= left && right <= goal){
		lazy[prev] ^= num;
		return;
	}
	
	int mid = (left + right)/2;
	update(left, mid, prev*2, start, goal, num);
	update(mid + 1, right, prev*2 + 1, start, goal, num);
}

void query(int left, int right, int prev, int pos){
	if(pos < left || right < pos)
		return;
	
	if(lazy[prev] != 0){
		ans^=lazy[prev];
	}
	
	if(left == right)
		return;
	
	int mid = (left + right)/2;
	query(left, mid, prev*2, pos);
	query(mid + 1, right, prev*2 + 1, pos);
	
}


int N, M;

int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	cin >> N;
	for(int i=1; i<=N; i++){
		cin >> info[i];
	}
	
	cin >> M;
	for(int i=0; i<M; i++){
		int a, b, c;
		cin >> a;
		
		if(a==1){
			cin >>a >> b >> c;
			update(1,N,1,a+1,b+1,c);
		}else{
			cin >> a;
			query(1,N,1, a+1);
            cout << (ans^info[a+1]) << '\n';
            ans = 0;
		}
	}
	
	return 0;
}
