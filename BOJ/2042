#include <iostream>
using namespace std;

typedef long long ll;

const int n_ = 1000001;
const int m_ = 4 * n_;

ll arr[n_];
ll info[m_];
ll N, M, K;


ll make(int prev, int left, int right){
	if(right < left)
		return 0;
		
	if(left == right){
		info[prev] = arr[left];
		return info[prev];
	}
	
	int mid = (left + right)/2;
	info[prev] = make(2*prev, left, mid) 
					+ make(2*prev + 1, mid + 1, right);
	
	
	return info[prev];
}


ll update(int pos, ll num, int prev, int left, int right){
	if(right < left)
		return 0;
		
	if(pos < left || right < pos){
		return info[prev];	
	}
	
	if(left == pos && right == pos){
		info[prev] = num;
		return info[prev];
	}
	
	int mid = (left + right)/2;
	info[prev] = update(pos, num, 2*prev, left, mid) +
						update(pos, num, 2*prev + 1, mid + 1, right);

	
	return info[prev];
}


ll find(int start, int end, int prev, int left, int right){
	//start~end 구간합. left~right == prev의 범위.
	ll ret = 0;
	
	if(right < left)
		return ret;
		
	if(end < left || start > right)
		return ret;
		
	if(left >= start && end >= right)
		return info[prev];	
	
	int mid = (left + right)/2;
	ret = find(start, end, 2* prev, left, mid) + 
				find(start, end, 2* prev + 1, mid + 1, right);
	
	return ret;
}


int main() {
	cin >> N >> M >> K;
	for(int i=1; i<=N; i++){
		cin >> arr[i];
	}
	
	make(1, 1, N);
	
	
	for(int i=0; i<M+K; i++){
		ll a, b, c;
		cin >> a >> b >> c;
		
		if(a == 1){
			update(b, c, 1, 1, N);
		}else{
			//cout << b << ' '<< c << ' ';
			cout << find(b, c, 1, 1, N) << '\n';
		}
	}
	
	return 0;
}
