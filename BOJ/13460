#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

struct state {
	pair<int, int> red_pos;
	pair<int, int> blue_pos;
};
int N,M;
set <ll> s;
int map[11][11]={ 0, };
int dx[8] = { 1,-1,0,0,1,-1,1,-1 };
int dy[8] = { 0,0,1,-1,1,1,-1,-1 };

int main() {
	scanf("%d %d", &N, &M);
	pair<int, int> start_red_pos;
	pair<int, int> start_blue_pos;
	for (int i = 1; i<=N; i++){
		char str[11];
		getchar();
		scanf("%s", str);
		for (int j = 1; j <= M; j++) {
			if(str[j-1] == '#')
				map[i][j] = 0;
			else if (str[j-1] == '.')
				map[i][j] = 1;
			else if (str[j-1] == 'B') {
				map[i][j] = 1;
				start_blue_pos.first = i;
				start_blue_pos.second = j;
			}
			else if (str[j-1] == 'R') {
				map[i][j] = 1;
				start_red_pos.first = i;
				start_red_pos.second = j;
			}
			else
				map[i][j] = -1; //끝.
		}
	}

	queue<struct state> q;
	struct state s;
	s.blue_pos = start_blue_pos;
	s.red_pos = start_red_pos;
	q.push(s);

	for (int level = 1;;level++) {
		if (level == 11) { //기저사례.
			printf("-1");
			return 0;
		}
		int size = q.size();
		if (size == 0)
			break;

		for (int j = 0; j < size; j++) {
			pair<int, int> blue = q.front().blue_pos;
			pair<int, int> red = q.front().red_pos;
			q.pop();

			for (int i = 0; i < 4; i++) {
				//일단 진행하고 둘의 위치가 겹치면 ~
				int red_fin = 0; //끝났는지 여부
				int blue_fin = 0;
				pair<int, int> next_blue; //다음 위치.
				pair<int, int> next_red;
				//파란색 먼저이동.
				for (int k = 1;;k++) {
					if (map[blue.first + dx[i] * k][blue.second + dy[i] * k] == 0) {
						//벽 발견. 더이상 진행 불가. 이전 단계까지 진행 가능.
						next_blue.first = blue.first + dx[i] * (k - 1);
						next_blue.second = blue.second+ dy[i] * (k - 1);
						break;
					}
					else if (map[blue.first + dx[i] * k][blue.second + dy[i] * k] == -1) {
						//구멍으로 들어감.
						blue_fin = 1;
						break;
					}
				}
				//빨간색 이동.
				for (int k = 1;; k++) {
					if (map[red.first + dx[i] * k][red.second + dy[i] * k] == 0) {
						//벽 발견. 더이상 진행 불가.
						next_red.first = red.first + dx[i] * (k - 1);
						next_red.second = red.second + dy[i] * (k - 1);
						break;
					}
					else if (map[red.first + dx[i] * k][red.second + dy[i] * k] == -1) {
						//구멍으로 들어감.
						red_fin = 1;
						break;
					}
				}
				//데이터 처리.
				if (red_fin == 1 && blue_fin == 0) { //빨간색이 구멍에 들어갔음으로 끝남.
					printf("%d", level);
					return 0;
				}
				else if (red_fin == 0 && blue_fin == 0) { //둘다 구멍에 들어가지 않았다.
					if (next_red.first == next_blue.first && next_red.second == next_blue.second) {
						//둘의 위치가 겹친다. 탐색 전, 둘이 서로 같은 직선상에 위치했음을 의미한다.
						//원래 위치에서 기울이는 방향으로, 누가 먼저 해당 위치에 도착하는지를 알아낸다.
						if (red.first * dx[i] + red.second * dy[i]
							> blue.first * dx[i] + blue.second * dy[i]) {
							//빨간색이 우선시 된다. 1칸 줄인다.
							next_blue.first -= dx[i];
							next_blue.second -= dy[i];
						}
						else {
							//파란색이 우선시 된다. 1칸 줄인다.
							next_red.first -= dx[i];
							next_red.second -= dy[i];
						}
					}
					struct state next;
					next.blue_pos = next_blue;
					next.red_pos = next_red;
					q.push(next);
				}
			}

		}
	}

	return 0;
}
