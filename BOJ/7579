#include<stack>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#include<cmath>
#include<cstring>
#define fst first
#define snd second
//#pragma warning(disable:4996)
using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;

const int INF = 2100000000; //
const int n_ = 101;

int min(int a, int b) { return a > b ? b : a; }
int max(int a, int b) { return a < b ? b : a; }

int N, M;
int dx[8] = { 1,-1,0,0,1,-1,1,-1 };
int dy[8] = { 0,0,1,-1,1,1,-1,-1 };
pair<int, int > info[n_];
int dp[101][10001];

int dfs(int prev, int c) { //
	if (prev >= N)
		return 0;

	if (dp[prev][c] == -1) {
		dp[prev][c] = dfs(prev + 1, c);
		 
		if (c >= info[prev].second) {
			int cmp = dfs(prev + 1, c - info[prev].second) + info[prev].first;
			dp[prev][c] = max(cmp, dp[prev][c]);
		}
	}

	return dp[prev][c];
}

int main() {
	//freopen("input.txt", "r", stdin);
	cin >> N >> M;
	for (int i = 0; i < N; i++) 
		cin >> info[i].first;
	for (int i = 0; i < N; i++) 
		cin >> info[i].second;

	/*
	 어떻게 dp을 짤 것인가?
	 비용의 합 == 100 * 100 -> 10000.
	 dp[N][10000] = 메모리 할당량을 저장.
	 M을 역추적.

	 dp가 나타내는 바는 해당 cost을 쓸때 얼마나 많은 메모리를 할당 받을수 있는지를 저장.
	*/

	int ret = 0, ans = 0;
	memset(dp, -1, sizeof(dp));
	for (int i = 10000; i >= 0; i--) {
		ret = dfs(0, i);
		if (ret >= M)
			ans = i;
	}

	cout << ans;
	return 0;
}
