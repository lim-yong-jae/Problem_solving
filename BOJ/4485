#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

int min(int a, int b) {
	if (a < b) return a;
	return b;
}

struct state {
	int i;
	int j;
	int score;
};

int N;
int dx[8] = { 1,-1,0,0,1,-1,1,-1 };
int dy[8] = { 0,0,1,-1,1,1,-1,-1 };
int map[126][126] = { 0, };
int min_count = 1000000000;

void BFS() {
	queue<struct state> q;
	int s_map[126][126] = { 0, };
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			s_map[i][j] = 1000000000;
		}
	}
	s_map[1][1] = map[1][1];
	struct state s;
	s.i = 1;
	s.j = 1;
	s.score = map[1][1];
	q.push(s);

	for (;;) {
		int size = q.size();
		if (size == 0)
			break;
		for (int j = 0; j < size; j++) {
			struct state prev;
			prev.i = q.front().i;
			prev.j = q.front().j;
			prev.score = q.front().score;
			q.pop();
			if (prev.i == N && prev.j == N) {
				min_count = min(min_count, prev.score);
				continue;
			}

			for (int i = 0; i < 4; i++) {
				if (1 <= prev.i + dx[i] && prev.i + dx[i] <= N && 1 <= prev.j + dy[i] && prev.j + dy[i] <= N 
					&& s_map[prev.i + dx[i]][prev.j + dy[i]] > prev.score ){
					s_map[prev.i + dx[i]][prev.j + dy[i]] = prev.score;
					struct state next;
					next.i = prev.i + dx[i];
					next.j = prev.j + dy[i];
					next.score = prev.score + map[prev.i + dx[i]][prev.j + dy[i]];
					q.push(next);
				}
			}
		}
	}
}

int main() {
	for (int L = 1;; L++) {
		scanf("%d", &N);

		if (N == 0)
			return 0;

		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= N; j++)
				scanf("%d", &map[i][j]);

		min_count = 1000000000;
		BFS();
		printf("Problem %d: %d\n", L, min_count);
	}
}
