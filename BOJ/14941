#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<vector>
#include<utility>
#include<queue>
#include<algorithm>
#include<set>
#include<iostream>
#define ll long long
#define ull unsigned long long
using namespace std;

int N;
ll dp[100001][2] = { 0, };
int table[100001] = { 0, };
vector<int> v;

ll dfs(int prev, int check) {
	//check == 1이면 -
	// 0이면 *3;
	if (prev == 100000) {
		dp[100000][0] = 0;
		dp[100000][1] = 0;
		return dp[prev][check];
	}

	if (dp[prev][check] == -1) {
		if (check == 1) {
			if (table[prev] == 2)
				dp[prev][check] = dfs(prev + 1, 0) - (ll)prev;
			else
				dp[prev][check] = dfs(prev + 1, 1);
		}
		else {
			if (table[prev] == 2)
				dp[prev][check] = dfs(prev + 1, 1) + (ll)3 * prev;
			else
				dp[prev][check] = dfs(prev + 1, 0);
		}
	}

	return dp[prev][check];
}

int main() {
	scanf("%d", &N);
	//소수 인지를 판별.
	table[0] = 1;
	table[1] = 1;
	for (int i = 2; i <= 100000; i++) {
		//소수임을 판별해야 한다.
		if (table[i] == 0) {
			int k = 0;
			for (k = 0; k < v.size(); k++) { //소수로 나누어 본다.
				if (i%v[k] == 0) {
					table[i] = 1; //소수가 아니다.
					break;
				}
			}

			if (k == v.size()) {
				table[i] = 2;
				v.push_back(i);
			}

			for (int j = 2; i*j <= 100000; j++)
				table[i*j] = 1;
		}
	}

	memset(dp, -1, sizeof(dp));
	for (int i = 0; i < N; i++) {
		ll a, b;
		scanf("%lld %lld", &a, &b);

		int count = 0;
		for (int i = 0; i < v.size(); i++)
			if (v[i] >= a) {
				for (int j = i; j < v.size(); j++)
					if (v[j] <= b)
						count++;
					else
						break;
				break;
			}


		if(count%2) //홀수
			printf("%lld\n", dfs(a,0) - dfs(b+1,1));
		else //짝수.
			printf("%lld\n", dfs(a, 0) - dfs(b+1, 0));
	}

	return 0;
}
